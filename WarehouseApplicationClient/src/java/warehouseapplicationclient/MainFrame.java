/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package warehouseapplicationclient;

import UserSessionBean.UserSessionBeanRemote;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import javax.ejb.EJB;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Viesturs Gribulis
 */
public class MainFrame extends javax.swing.JFrame {
    @EJB
    private static UserSessionBeanRemote userSessionBean;
         
    DefaultTableModel usersModel;
    DefaultTableModel inventoryModel;
    DefaultTableModel ordersModel;

    String username;

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
        UserPanel.setVisible(false);
        UserTabbedPanel.getModel().addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                JPanel panel = (JPanel) UserTabbedPanel.getSelectedComponent();
                selectedTabIndex = UserTabbedPanel.getModel().getSelectedIndex();   
                SearchField.setText("");
            }
        });
    }
    
    int selectedTabIndex = 0;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoginPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LoginBtn = new javax.swing.JButton();
        NameText = new javax.swing.JTextField();
        SurnameText = new javax.swing.JTextField();
        RegisterBtn = new javax.swing.JButton();
        UserPanel = new javax.swing.JPanel();
        UserTabbedPanel = new javax.swing.JTabbedPane();
        UserTab = new javax.swing.JPanel();
        UsrTableScroll = new javax.swing.JScrollPane();
        UsersTable = new javax.swing.JTable();
        AddUserBtn = new javax.swing.JButton();
        DeleteUserBtn = new javax.swing.JButton();
        SelectedUserIDTextField = new javax.swing.JTextField();
        FirstNameField = new javax.swing.JTextField();
        LastNameField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        DepositField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        InventoryTab = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        InventoryTable = new javax.swing.JTable();
        DeleteInventoryBtn = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        SelectedInventoryIDField = new javax.swing.JTextField();
        AddInventoryBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        DescriptionField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        AmountField = new javax.swing.JTextField();
        PriceField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        OrderInventoryBtn = new javax.swing.JButton();
        OrderAmountField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        GetRangeBtn = new javax.swing.JButton();
        RangeTypeField = new javax.swing.JComboBox();
        MinField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        MaxField = new javax.swing.JTextField();
        CartTab = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        OrdersTable = new javax.swing.JTable();
        CheckoutBtn = new javax.swing.JButton();
        RemoveBtn = new javax.swing.JButton();
        ClearAllBtn = new javax.swing.JButton();
        SelectedOrderIDField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        LogoutBtn = new javax.swing.JButton();
        UsernameLabel = new javax.swing.JLabel();
        usernameLabel1 = new javax.swing.JLabel();
        SearchField = new javax.swing.JTextField();
        SearchBtn = new javax.swing.JButton();
        usernameLabel2 = new javax.swing.JLabel();
        DepositLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Name:");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Surname:");

        LoginBtn.setText("Log In");
        LoginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginBtnActionPerformed(evt);
            }
        });

        RegisterBtn.setText("Register");
        RegisterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RegisterBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(NameText)
                    .addComponent(SurnameText)
                    .addComponent(LoginBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(287, Short.MAX_VALUE))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addContainerGap(279, Short.MAX_VALUE)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(NameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(SurnameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(LoginBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RegisterBtn)
                .addGap(171, 171, 171))
        );

        UserTabbedPanel.setMinimumSize(new java.awt.Dimension(300, 400));
        UserTabbedPanel.setPreferredSize(new java.awt.Dimension(300, 400));

        UsersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "First name", "Last name"
            }
        ));
        UsersTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        UsersTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UsersTableKeyPressed(evt);
            }
        });
        UsrTableScroll.setViewportView(UsersTable);

        AddUserBtn.setText("Add New");
        AddUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddUserBtnActionPerformed(evt);
            }
        });

        DeleteUserBtn.setText("Delete");
        DeleteUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteUserBtnActionPerformed(evt);
            }
        });

        SelectedUserIDTextField.setText("0");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("First name:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("Last name:");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Identificator:");

        DepositField.setText("0.00");
        DepositField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositFieldActionPerformed(evt);
            }
        });

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Deposit:");

        javax.swing.GroupLayout UserTabLayout = new javax.swing.GroupLayout(UserTab);
        UserTab.setLayout(UserTabLayout);
        UserTabLayout.setHorizontalGroup(
            UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UsrTableScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
            .addGroup(UserTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(UserTabLayout.createSequentialGroup()
                        .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(UserTabLayout.createSequentialGroup()
                                .addComponent(DeleteUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
                            .addGroup(UserTabLayout.createSequentialGroup()
                                .addComponent(AddUserBtn)
                                .addGap(18, 18, 18)
                                .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(FirstNameField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SelectedUserIDTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(DepositField, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                        .addGap(84, 84, 84)))
                .addContainerGap())
        );
        UserTabLayout.setVerticalGroup(
            UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserTabLayout.createSequentialGroup()
                .addComponent(UsrTableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteUserBtn)
                    .addComponent(SelectedUserIDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(10, 10, 10)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddUserBtn)
                    .addComponent(FirstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(DepositField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(0, 137, Short.MAX_VALUE))
        );

        UserTabbedPanel.addTab("Users", UserTab);

        InventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(InventoryTable);

        DeleteInventoryBtn.setText("Delete");
        DeleteInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteInventoryBtnActionPerformed(evt);
            }
        });

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("Identificator:");

        SelectedInventoryIDField.setText("0");
        SelectedInventoryIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedInventoryIDFieldActionPerformed(evt);
            }
        });

        AddInventoryBtn.setText("Add New");
        AddInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddInventoryBtnActionPerformed(evt);
            }
        });

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("Description:");

        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel11.setText("Amount:");

        AmountField.setText("0");
        AmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AmountFieldActionPerformed(evt);
            }
        });

        PriceField.setText("0.00");
        PriceField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PriceFieldActionPerformed(evt);
            }
        });

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel12.setText("Price:");

        OrderInventoryBtn.setText("Order");
        OrderInventoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderInventoryBtnActionPerformed(evt);
            }
        });

        OrderAmountField.setText("0");
        OrderAmountField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderAmountFieldActionPerformed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Order amount:");

        GetRangeBtn.setText("Get Range");
        GetRangeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetRangeBtnActionPerformed(evt);
            }
        });

        RangeTypeField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        MinField.setText("0.00");
        MinField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinFieldActionPerformed(evt);
            }
        });

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel17.setText("Min:");

        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Max:");

        MaxField.setText("0.00");

        javax.swing.GroupLayout InventoryTabLayout = new javax.swing.GroupLayout(InventoryTab);
        InventoryTab.setLayout(InventoryTabLayout);
        InventoryTabLayout.setHorizontalGroup(
            InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
            .addGroup(InventoryTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InventoryTabLayout.createSequentialGroup()
                        .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(InventoryTabLayout.createSequentialGroup()
                                .addComponent(DeleteInventoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE))
                            .addGroup(InventoryTabLayout.createSequentialGroup()
                                .addComponent(AddInventoryBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(InventoryTabLayout.createSequentialGroup()
                        .addComponent(OrderInventoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(OrderAmountField)
                    .addComponent(DescriptionField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PriceField, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                    .addComponent(SelectedInventoryIDField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(GetRangeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InventoryTabLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MinField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RangeTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MaxField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(InventoryTabLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        InventoryTabLayout.setVerticalGroup(
            InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InventoryTabLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OrderInventoryBtn)
                    .addComponent(OrderAmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(GetRangeBtn)
                    .addComponent(RangeTypeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteInventoryBtn)
                    .addComponent(jLabel9)
                    .addComponent(SelectedInventoryIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MinField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(MaxField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddInventoryBtn)
                    .addComponent(DescriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InventoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(AmountField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(76, Short.MAX_VALUE))
        );

        UserTabbedPanel.addTab("Inventory", InventoryTab);

        OrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(OrdersTable);

        CheckoutBtn.setText("Checkout");
        CheckoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckoutBtnActionPerformed(evt);
            }
        });

        RemoveBtn.setText("Remove");
        RemoveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveBtnActionPerformed(evt);
            }
        });

        ClearAllBtn.setText("Clear All");
        ClearAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAllBtnActionPerformed(evt);
            }
        });

        SelectedOrderIDField.setText("0");
        SelectedOrderIDField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectedOrderIDFieldActionPerformed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("Identificator:");

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel15.setText("Total Sum:");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("0.00");

        javax.swing.GroupLayout CartTabLayout = new javax.swing.GroupLayout(CartTab);
        CartTab.setLayout(CartTabLayout);
        CartTabLayout.setHorizontalGroup(
            CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
            .addGroup(CartTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CheckoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                    .addComponent(RemoveBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ClearAllBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SelectedOrderIDField))
                .addGap(344, 344, 344))
        );
        CartTabLayout.setVerticalGroup(
            CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CartTabLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CheckoutBtn)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addGroup(CartTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(SelectedOrderIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(ClearAllBtn)
                .addGap(0, 80, Short.MAX_VALUE))
        );

        UserTabbedPanel.addTab("Cart", CartTab);

        LogoutBtn.setText("Log out");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        UsernameLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        UsernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        UsernameLabel.setText("NAME SURNAME");

        usernameLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        usernameLabel1.setText("Username:");

        SearchBtn.setText("Search");
        SearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchBtnActionPerformed(evt);
            }
        });

        usernameLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        usernameLabel2.setText("Deposit:");

        DepositLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        DepositLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        DepositLabel.setText("0.00");

        javax.swing.GroupLayout UserPanelLayout = new javax.swing.GroupLayout(UserPanel);
        UserPanel.setLayout(UserPanelLayout);
        UserPanelLayout.setHorizontalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(UserTabbedPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SearchField, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addGap(14, 14, 14)
                .addComponent(SearchBtn)
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(usernameLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, UserPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(usernameLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(UserPanelLayout.createSequentialGroup()
                        .addComponent(UsernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LogoutBtn))
                    .addComponent(DepositLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
        UserPanelLayout.setVerticalGroup(
            UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(UserPanelLayout.createSequentialGroup()
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LogoutBtn)
                    .addComponent(UsernameLabel)
                    .addComponent(usernameLabel1)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(UserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameLabel2)
                    .addComponent(DepositLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserTabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(LoginPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(UserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(LoginPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(UserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 589, Short.MAX_VALUE)))
        );

        setSize(new java.awt.Dimension(735, 628));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginBtnActionPerformed
        // TODO add your handling code here:
        try {
            String response = userSessionBean.logIn(NameText.getText(), SurnameText.getText());
            boolean isLoggedIn = response == null;
            
            if(isLoggedIn){
                initializeUserPanel();
                initializeInventoryPanel();
                initializeCartPanel();
                LoginPanel.setVisible(false);
                UserPanel.setVisible(true);
                UsernameLabel.setText(userSessionBean.getFullUserName());
                this.RangeTypeField.setModel(new DefaultComboBoxModel(new String[]{ "By Stock", "By Price", "All" }));
            }
            else {
                JOptionPane.showMessageDialog(null, "Failed to log in: " + response, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to log in /n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_LoginBtnActionPerformed

    private void RegisterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterBtnActionPerformed
        // TODO add your handling code here:
        try {
            String response = userSessionBean.register(NameText.getText(), SurnameText.getText());
            boolean success = response == null;
            
            if(success){
                initializeUserPanel();
                initializeInventoryPanel();
                initializeCartPanel();
                LoginPanel.setVisible(false);
                UserPanel.setVisible(true);
            }
            else {
                JOptionPane.showMessageDialog(null, "Failed to register: " + response, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to log in /n" + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RegisterBtnActionPerformed

    private void SearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchBtnActionPerformed

        if(this.selectedTabIndex == 0){
            this.initializeUserPanel();
        } else if(this.selectedTabIndex == 1) {
            this.initializeInventoryPanel();
        } else if(this.selectedTabIndex == 2) {
            this.initializeCartPanel();
        }
    }//GEN-LAST:event_SearchBtnActionPerformed

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        LoginPanel.setVisible(true);
        UserPanel.setVisible(false);
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void SelectedOrderIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedOrderIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SelectedOrderIDFieldActionPerformed

    private void ClearAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAllBtnActionPerformed
        try {
            String response = userSessionBean.deleteAllUserOrders();

            if(response == null){
                this.initializeUserPanel();
                this.initializeCartPanel();
                this.initializeInventoryPanel();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to clear all orders: " + response, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to checkout: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ClearAllBtnActionPerformed

    private void RemoveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveBtnActionPerformed
        try {
            int id = Integer.parseInt(this.SelectedOrderIDField.getText());
            String response = userSessionBean.deleteOrder(id);

            if(response != null)
            JOptionPane.showMessageDialog(null, "Failed to remove an order: " + response, "Error", JOptionPane.ERROR_MESSAGE);
            else {
                this.SelectedOrderIDField.setText("");
                this.initializeUserPanel();
                this.initializeCartPanel();
                this.initializeInventoryPanel();
            }
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to remove an order: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_RemoveBtnActionPerformed

    private void CheckoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckoutBtnActionPerformed
        try {
            BigDecimal checkout = userSessionBean.checkout();
            JOptionPane.showMessageDialog(null, "Checkout sum: " + checkout.toPlainString(), "Checkout successful!", JOptionPane.ERROR_MESSAGE);

            this.initializeUserPanel();
            this.initializeCartPanel();
            this.initializeInventoryPanel();
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to checkout: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_CheckoutBtnActionPerformed

    private void MinFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MinFieldActionPerformed

    private void GetRangeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetRangeBtnActionPerformed
        BigDecimal min = null;
        BigDecimal max = null;
        try {
            int selectedIndex = this.RangeTypeField.getSelectedIndex();
            Object[][] inventoryList;
            SearchField.setText("");
            
            switch(selectedIndex){
                case 0:
                inventoryList = userSessionBean.getInventoryByStockReserve();
                break;
                case 1:
                min = new BigDecimal(this.MinField.getText()).setScale(2, RoundingMode.FLOOR);
                max = new BigDecimal(this.MaxField.getText()).setScale(2, RoundingMode.FLOOR);
                this.MinField.setText(min.toPlainString());
                this.MaxField.setText(max.toPlainString());
                inventoryList = userSessionBean.getInventoryByPrice(min, max);
                break;
                case 2:
                inventoryList = userSessionBean.getAllInventory(null);
                break;
                default:
                throw new Exception();
            }
            
            inventoryModel.setNumRows(0);

            if(isEmpty(inventoryList) == false){
                for(Object[] inventory : inventoryList) {
                    inventoryModel.addRow(inventory);
                }
            }

            inventoryModel.fireTableDataChanged();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,
                        "Failed to get inventory range: Incorrect " + 
                        (min != null ? "max" : "min") + 
                        " format! Example of correct format - 10.00"
                , "Error", JOptionPane.ERROR_MESSAGE);
        }      
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to get range: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_GetRangeBtnActionPerformed

    private void OrderAmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderAmountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrderAmountFieldActionPerformed

    private void OrderInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderInventoryBtnActionPerformed
        try {
            int id = Integer.parseInt(this.SelectedInventoryIDField.getText());
            int amount = Integer.parseInt(this.OrderAmountField.getText());
            String response = userSessionBean.createOrder(id, amount);

            if(response != null)
            JOptionPane.showMessageDialog(null, "Failed to make an order: " + response, "Error", JOptionPane.ERROR_MESSAGE);

            this.initializeUserPanel();
            this.initializeCartPanel();
            this.initializeInventoryPanel();
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to make an order: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_OrderInventoryBtnActionPerformed

    private void PriceFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PriceFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PriceFieldActionPerformed

    private void AmountFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AmountFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AmountFieldActionPerformed

    private void AddInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddInventoryBtnActionPerformed
        BigDecimal price = null;
        try {
            price = new BigDecimal(this.PriceField.getText().trim());
            int amount = Integer.parseInt(this.AmountField.getText().trim());
            String description = this.DescriptionField.getText().trim();
            price = price.setScale(2, RoundingMode.FLOOR);
         
            String response = userSessionBean.createInventory(description, price, amount);

            if(response != null)
                JOptionPane.showMessageDialog(null, "Failed to make an inventory: " + response, "Error", JOptionPane.ERROR_MESSAGE);

            this.initializeInventoryPanel();
        }  catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,
                        "Failed to create inventory: Incorrect " + 
                        (price != null ? "amount" : "price") + 
                        " format! Example of correct format - " + 
                        (price != null ? "10" : "10.00")
                , "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to make an inventory: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddInventoryBtnActionPerformed

    private void SelectedInventoryIDFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectedInventoryIDFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SelectedInventoryIDFieldActionPerformed

    private void DeleteInventoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteInventoryBtnActionPerformed
        try {
            int id = Integer.parseInt(this.SelectedInventoryIDField.getText());
            String response = userSessionBean.deleteInventory(id);

            if(response != null)
            JOptionPane.showMessageDialog(null, "Failed to delete inventory: " + response, "Error", JOptionPane.ERROR_MESSAGE);

            this.initializeUserPanel();
            this.initializeCartPanel();
            this.initializeInventoryPanel();
        }
        catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Failed to delete inventory: " + ex.toString(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DeleteInventoryBtnActionPerformed

    private void DepositFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositFieldActionPerformed

    }//GEN-LAST:event_DepositFieldActionPerformed

    private void DeleteUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteUserBtnActionPerformed
        try{
            String idString = SelectedUserIDTextField.getText();

            if(isEmpty(idString)){
                return;
            }

            int id = (int) Integer.parseInt(idString.trim());
            String response = userSessionBean.delete(id);
            if(response != null)
            JOptionPane.showMessageDialog(null, "Failed to delete user: " + response, "Error", JOptionPane.ERROR_MESSAGE);

            initializeUserPanel();
            initializeCartPanel();
        }
        catch (Exception ex){

        }
    }//GEN-LAST:event_DeleteUserBtnActionPerformed

    private void AddUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddUserBtnActionPerformed

        try {
            String firstName = this.FirstNameField.getText();
            String lastName = this.LastNameField.getText();
            String depositString = (String) this.DepositField.getText();
            BigDecimal deposit = new BigDecimal(depositString);
            deposit = deposit.setScale(2, RoundingMode.FLOOR);

            String response = userSessionBean.create(firstName, lastName, deposit);

            if(isEmpty(response) == false){
                JOptionPane.showMessageDialog(null, "Failed to register: " + response, "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                this.initializeUserPanel();
                this.FirstNameField.setText("");
                this.LastNameField.setText("");
                this.DepositField.setText("0.00");
            }
        }  catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null,
                "Failed to create user: Incorrect deposit format! Example of correct format - 10.00"
                , "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Failed to register: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AddUserBtnActionPerformed

    private void UsersTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UsersTableKeyPressed

    }//GEN-LAST:event_UsersTableKeyPressed

    public boolean firstTime = true;
    
    public void initializeUserPanel(){
        if(usersModel!=null)
            usersModel.setNumRows(0);
        this.UsernameLabel.setText(userSessionBean.getFullUserName());
        this.DepositLabel.setText(userSessionBean.getUserDeposit().toPlainString());
        
        String searchString = SearchField.getText();
        searchString = searchString != null ? searchString.trim() : searchString;
        
        if(firstTime){
            usersModel = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int col){
                    return col != 0;
                }
            };

            usersModel.addTableModelListener(new TableModelListener(){
                @Override
                public void tableChanged(TableModelEvent e) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    DefaultTableModel model = (DefaultTableModel)e.getSource();

                    if(e.getType() == e.UPDATE && row > -1 && column > -1){
                        try{
                            String depositString = (String) model.getValueAt(row, 3);
                            BigDecimal deposit = new BigDecimal(depositString);
                            deposit = deposit.setScale(2, RoundingMode.FLOOR);
                            
                            String response = userSessionBean.update
                            (
                                    (int) model.getValueAt(row, 0), 
                                    (String) model.getValueAt(row, 1), 
                                    (String) model.getValueAt(row, 2),
                                    deposit
                            );
                            if(response != null) 
                                JOptionPane.showMessageDialog(null, "Failed to update user: " + response, "Error", JOptionPane.ERROR_MESSAGE);                            
                        } catch (NumberFormatException ex){
                            JOptionPane.showMessageDialog(null, 
                                    "Failed to update user: Incorrect deposit format! Example of correct format - 10.00" 
                                    , "Error", JOptionPane.ERROR_MESSAGE);                            
                        } catch(Exception ex){
                            JOptionPane.showMessageDialog(null, "Failed to update user: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);                            
                        }
                        
                        initializeUserPanel();
                    }
                }
            });

            UsersTable.setModel(usersModel);

            UsersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent event) {
                    if(UsersTable.getSelectedRow() != -1){
                        int id = (int) usersModel.getValueAt(UsersTable.getSelectedRow(), 0);
                        SelectedUserIDTextField.setText(id + "");                        
                    }
                }
            });

            usersModel.addColumn("ID");
            usersModel.addColumn("First name");
            usersModel.addColumn("Last name");
            usersModel.addColumn("Deposit");
        }
        
        Object[][] users = userSessionBean.getAllUsers(searchString);
        
        if(isEmpty(users) == false){
            for(Object[] user : users) {
                usersModel.addRow(user);
            }                   
        }
        
        usersModel.fireTableDataChanged();
    }
    
    public void initializeInventoryPanel() {
        if(inventoryModel!=null)
            inventoryModel.setNumRows(0);
        String searchString = SearchField.getText();
        searchString = searchString != null ? searchString.trim() : searchString;
            
        if(firstTime){
            inventoryModel = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int col){
                    return col == 1 || col == 2 || col == 3;
                }
            };

            inventoryModel.addTableModelListener(new TableModelListener(){
                @Override
                public void tableChanged(TableModelEvent e) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    DefaultTableModel model = (DefaultTableModel)e.getSource();

                    if(e.getType() == e.UPDATE && row > -1 && column > -1){
                        try {
                            Object priceObject =  model.getValueAt(row, 2);
                            BigDecimal price = BigDecimal.ZERO;
                            if(priceObject.getClass().equals(String.class)){
                                price = new BigDecimal((String)priceObject);
                            } else if(priceObject.getClass().equals(BigDecimal.class)){
                                price = (BigDecimal) priceObject;
                            }
                            
                            price = price.setScale(2, RoundingMode.FLOOR);
          
                            Object amountObject =  model.getValueAt(row, 3);
                            int amount = 0;
                            if(amountObject.getClass().equals(int.class)){
                                amount = (int) amountObject;
                            } else if(priceObject.getClass().equals(BigDecimal.class)){
                                amount = Integer.parseInt((String) amountObject);
                            }
                            
                            String response = userSessionBean.updateInventory
                            (
                                    (int) model.getValueAt(row, 0), 
                                    (String) model.getValueAt(row, 1), 
                                    price,
                                    amount 
                            );

                            if(response != null) 
                                JOptionPane.showMessageDialog(null, "Failed to update inventory: " + response, "Error", JOptionPane.ERROR_MESSAGE);                            
                        }  catch (NumberFormatException ex){
                            JOptionPane.showMessageDialog(null, 
                                    "Failed to update user: Incorrect price format! Example of correct format - 10.00" 
                                    , "Error", JOptionPane.ERROR_MESSAGE);                            
                        } catch (Exception ex){
                            JOptionPane.showMessageDialog(null, "Failed to update inventory: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);                            
                        }

                        initializeCartPanel();
                        initializeInventoryPanel();
                    }
                }
            });
          
            InventoryTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent event) {
                    if(InventoryTable.getSelectedRow() != -1){
                        int id = (int) inventoryModel.getValueAt(InventoryTable.getSelectedRow(), 0);
                        SelectedInventoryIDField.setText(id + "");
                    }
                }
            });            
            
            InventoryTable.setModel(inventoryModel);
            
            inventoryModel.addColumn("ID");
            inventoryModel.addColumn("Description");
            inventoryModel.addColumn("Price");
            inventoryModel.addColumn("In Stock");
            inventoryModel.addColumn("Reserved");            
        }
        
        Object[][] inventoryList = userSessionBean.getAllInventory(searchString);
        
        if(isEmpty(inventoryList) == false){
            for(Object[] inventory : inventoryList) {
                inventoryModel.addRow(inventory);
            }                   
        }
        
        inventoryModel.fireTableDataChanged();
    }
    
    public void initializeCartPanel() {
        if(ordersModel!=null)
            ordersModel.setNumRows(0);
        String searchString = SearchField.getText();
        searchString = searchString != null ? searchString.trim() : searchString;
        this.jLabel16.setText(userSessionBean.getUserCartSum().toPlainString());
        
        if(firstTime){
            ordersModel = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int col){
                    return col == 2;
                }
            };

            ordersModel.addTableModelListener(new TableModelListener(){
                @Override
                public void tableChanged(TableModelEvent e) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    DefaultTableModel model = (DefaultTableModel)e.getSource();

                    if(e.getType() == e.UPDATE && row > -1 && column > -1){
                        try {
                            String response = userSessionBean.updateOrder
                            (
                                    Integer.parseInt(model.getValueAt(row, 0).toString()), 
                                    Integer.parseInt(model.getValueAt(row, 2).toString())
                            );

                            if(response != null) 
                                JOptionPane.showMessageDialog(null, "Failed to update order: " + response, "Error", JOptionPane.ERROR_MESSAGE);
                        } catch (Exception ex){
                            JOptionPane.showMessageDialog(null, "Failed to update order: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);                            
                        }                        

                        initializeCartPanel();
                        initializeInventoryPanel();
                    }
                }
            });
          
            OrdersTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
                public void valueChanged(ListSelectionEvent event) {
                    if(OrdersTable.getSelectedRow() != -1){
                        int id = (int) ordersModel.getValueAt(OrdersTable.getSelectedRow(), 0);
                        SelectedOrderIDField.setText(id + "");
                    }
                }
            });            
            
            OrdersTable.setModel(ordersModel);
            ordersModel.addColumn("ID");
            ordersModel.addColumn("Item ID");
            ordersModel.addColumn("Amount");
            ordersModel.addColumn("Total Price");
            ordersModel.addColumn("Date");
        }        
        

        Object[][] orders = userSessionBean.getAllOrders(null);
        
        if(isEmpty(orders) == false){
            for(Object[] order : orders) {
                ordersModel.addRow(order);
            }                   
        } 
        
        ordersModel.fireTableDataChanged();
    }
    
    private boolean isEmpty(String text){
        return text == null || text.equals("");
    }
    
    private boolean isEmpty(Object[][] response){
        return response == null || response.length <= 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddInventoryBtn;
    private javax.swing.JButton AddUserBtn;
    private javax.swing.JTextField AmountField;
    private javax.swing.JPanel CartTab;
    private javax.swing.JButton CheckoutBtn;
    private javax.swing.JButton ClearAllBtn;
    private javax.swing.JButton DeleteInventoryBtn;
    private javax.swing.JButton DeleteUserBtn;
    private javax.swing.JTextField DepositField;
    private javax.swing.JLabel DepositLabel;
    private javax.swing.JTextField DescriptionField;
    private javax.swing.JTextField FirstNameField;
    private javax.swing.JButton GetRangeBtn;
    private javax.swing.JPanel InventoryTab;
    private javax.swing.JTable InventoryTable;
    private javax.swing.JTextField LastNameField;
    private javax.swing.JButton LoginBtn;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JTextField MaxField;
    private javax.swing.JTextField MinField;
    private javax.swing.JTextField NameText;
    private javax.swing.JTextField OrderAmountField;
    private javax.swing.JButton OrderInventoryBtn;
    private javax.swing.JTable OrdersTable;
    private javax.swing.JTextField PriceField;
    private javax.swing.JComboBox RangeTypeField;
    private javax.swing.JButton RegisterBtn;
    private javax.swing.JButton RemoveBtn;
    private javax.swing.JButton SearchBtn;
    private javax.swing.JTextField SearchField;
    private javax.swing.JTextField SelectedInventoryIDField;
    private javax.swing.JTextField SelectedOrderIDField;
    private javax.swing.JTextField SelectedUserIDTextField;
    private javax.swing.JTextField SurnameText;
    private javax.swing.JPanel UserPanel;
    private javax.swing.JPanel UserTab;
    private javax.swing.JTabbedPane UserTabbedPanel;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JTable UsersTable;
    private javax.swing.JScrollPane UsrTableScroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel usernameLabel1;
    private javax.swing.JLabel usernameLabel2;
    // End of variables declaration//GEN-END:variables
}
